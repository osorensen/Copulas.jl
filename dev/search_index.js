var documenterSearchIndex = {"docs":
[{"location":"ellipticals/#Elliptical-Copulas","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"","category":"section"},{"location":"ellipticals/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"Details about the elliptical Copulas","category":"page"},{"location":"ellipticals/#Generic-Elliptical-copulas","page":"Elliptical Copulas","title":"Generic Elliptical copulas","text":"","category":"section"},{"location":"ellipticals/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"explain how we could define a generic elliptical copulas, and methods that are related to them. ","category":"page"},{"location":"ellipticals/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"EllipticalCopula","category":"page"},{"location":"ellipticals/#Available-elliptical-copulas","page":"Elliptical Copulas","title":"Available elliptical copulas","text":"","category":"section"},{"location":"ellipticals/#Gaussian","page":"Elliptical Copulas","title":"Gaussian","text":"","category":"section"},{"location":"ellipticals/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"GaussianCopula","category":"page"},{"location":"ellipticals/#Copulas.GaussianCopula","page":"Elliptical Copulas","title":"Copulas.GaussianCopula","text":"GaussianCopula{d,MT}\n\nFields:\n\nΣ::MT - covariance matrix\n\nConstructor\n\nGaussianCopula(Σ)\n\nThe Gaussian Copula is the  copula of a Multivariate normal distribution. It is constructed as : \n\nC(mathbfx boldsymbolSigma) = F_Sigma(F_Sigmai^-1(x_i)iin 1d)\n\nwhere F_Sigma is a cdf of a gaussina random vector and F_{\\Sigma,i} is the ith marignal cdf, while `Sigma is the covariance matrix. \n\nIt can be constructed in Julia via:  \n\nC = GaussianCopula(Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(GaussianCopula,data)\n\n\n\n\n\n","category":"type"},{"location":"ellipticals/#Student's-T","page":"Elliptical Copulas","title":"Student's T","text":"","category":"section"},{"location":"ellipticals/","page":"Elliptical Copulas","title":"Elliptical Copulas","text":"TCopula","category":"page"},{"location":"ellipticals/#Copulas.TCopula","page":"Elliptical Copulas","title":"Copulas.TCopula","text":"TCopula{d,MT}\n\nFields:\n\ndf::Int - number of degree of freedom\nΣ::MT - covariance matrix\n\nConstructor\n\nTCopula(df,Σ)\n\nThe Student's T Copula is the  copula of a Multivariate Student distribution. It is constructed as : \n\nC(mathbfx boldsymbolnSigma) = F_nSigma(F_nSigmai^-1(x_i)iin 1d)\n\nwhere F_nSigma is a cdf of a multivariate student random vector with covariance matrix Sigma and n degrees of freedom. and F_{n,\\Sigma,i} is the ith marignal cdf. \n\nIt can be constructed in Julia via:  \n\nC = TCopula(n,Σ)\n\nThe random number generation works as expected:\n\nrand(C,1000)\n# or\nRandom.rand!(C,u)\n\nAnd yo can fit the distribution via : \n\nfit(TCopula,data)\n\nExcept that currently it does not work since fit(Distributions.MvTDist,data) does not dispatch. \n\n\n\n\n\n","category":"type"},{"location":"archimedeans/#Archimedean-Copulas","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Details about what are archimedean copulas (on the math level)","category":"page"},{"location":"archimedeans/#Generic-Archimedean-Copulas","page":"Archimedean Copulas","title":"Generic Archimedean Copulas","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Details about the generic construction of archimedean copulas (in the package),  and details on exported methods that corresponds to this class ","category":"page"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ArchimedeanCopula","category":"page"},{"location":"archimedeans/#Implement-your-own","page":"Archimedean Copulas","title":"Implement your own","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"Explain how easy it is to implement your own archimedean copulas and work with them. methods: ","category":"page"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"struct MyAC{d,T} <: ArchimedeanCopula{d}\r\n    par::T\r\nend\r\nϕ(C::MyAC{d},x)\r\nϕ⁻¹(C::MyAC{d},x)\r\nτ(C::MyAC{d})\r\nτ⁻¹(::MyAC{d},τ)\r\nradial_dist(C::MyAC{d})","category":"page"},{"location":"archimedeans/#Available-Archimedean-copulas","page":"Archimedean Copulas","title":"Available Archimedean copulas","text":"","category":"section"},{"location":"archimedeans/#Independence","page":"Archimedean Copulas","title":"Independence","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"IndependentCopula","category":"page"},{"location":"archimedeans/#Copulas.IndependentCopula","page":"Archimedean Copulas","title":"Copulas.IndependentCopula","text":"IndependentCopula{d,T}\n\nConstructor\n\nIndependentCopula(d, θ)\n\nThe Independant Copula in dimension d is the simplest copula, that has the form : \n\nC(mathbfx) = prod_i=1^d x_i\n\nIt happends to be an Archimedean Copula, with generator : \n\nphi(t) = exp-t\n\n\n\n\n\n","category":"type"},{"location":"archimedeans/#Clayton","page":"Archimedean Copulas","title":"Clayton","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"ClaytonCopula","category":"page"},{"location":"archimedeans/#Copulas.ClaytonCopula","page":"Archimedean Copulas","title":"Copulas.ClaytonCopula","text":"ClaytonCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nClaytonCopula(d, θ)\n\nThe Clayton copula in dimension d is parameterized by theta in -1infty) when d=2 and theta in 0infty) if d2. It is an Archimedean copula with generator : \n\nphi(t) = left(1+mathrmsign(theta)*tright)^-1frac1theta\n\n\n\n\n\n","category":"type"},{"location":"archimedeans/#Frank","page":"Archimedean Copulas","title":"Frank","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"FrankCopula","category":"page"},{"location":"archimedeans/#Copulas.FrankCopula","page":"Archimedean Copulas","title":"Copulas.FrankCopula","text":"FrankCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nFrankCopula(d, θ)\n\nThe Frank copula in dimension d is parameterized by theta in 0infty). It is an Archimedean copula with generator : \n\nphi(t) = -fraclogleft(1+e^-t(e^-theta-1)right)\theta\n\n\n\n\n\n","category":"type"},{"location":"archimedeans/#Gumbel","page":"Archimedean Copulas","title":"Gumbel","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"GumbelCopula","category":"page"},{"location":"archimedeans/#Copulas.GumbelCopula","page":"Archimedean Copulas","title":"Copulas.GumbelCopula","text":"GumbelCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nGumbelCopula(d, θ)\n\nThe Gumbel copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = exp-t^frac1θ\n\n\n\n\n\n","category":"type"},{"location":"archimedeans/#Ali-Mikhail-Haq","page":"Archimedean Copulas","title":"Ali-Mikhail-Haq","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"AMHCopula","category":"page"},{"location":"archimedeans/#Copulas.AMHCopula","page":"Archimedean Copulas","title":"Copulas.AMHCopula","text":"AMHCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nAMHCopula(d, θ)\n\nThe AMH copula in dimension d is parameterized by theta in 01). It is an Archimedean copula with generator : \n\nphi(t) = 1 - frac1-thetae^-t-theta\n\n\n\n\n\n","category":"type"},{"location":"archimedeans/#Joe","page":"Archimedean Copulas","title":"Joe","text":"","category":"section"},{"location":"archimedeans/","page":"Archimedean Copulas","title":"Archimedean Copulas","text":"JoeCopula","category":"page"},{"location":"archimedeans/#Copulas.JoeCopula","page":"Archimedean Copulas","title":"Copulas.JoeCopula","text":"JoeCopula{d,T}\n\nFields:\n\nθ::Real - parameter\n\nConstructor\n\nJoeCopula(d, θ)\n\nThe Joe copula in dimension d is parameterized by theta in 1infty). It is an Archimedean copula with generator : \n\nphi(t) = 1 - left(1 - e^-tright)^frac1theta\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Copulas","category":"page"},{"location":"#Copulas","page":"Home","title":"Copulas","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Copulas.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Copulas]","category":"page"},{"location":"#Copulas.Copulas","page":"Home","title":"Copulas.Copulas","text":"Copulas\n\n<!– (Image: Stable) –> (Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Code Style: Blue) (Image: ColPrac: Contributor's Guide on Collaborative Practices for Community Packages) (Image: DOI)\n\nWhat is this package ?\n\nWarning: This is fairly untested and experimental work and the API might change without notice.\n\nThis package brings most standard copula features into native Julia: random number generation, pdf and cdf, fitting, copula-based multivariate distributions through Sklar's theorem, etc., while fully complying with the Distributions.jl API (after all, copulas are distributions functions) in order to provide interoperability with other packages based on this API such as, e.g., Turing.jl.\n\nUsually, people that use and work with copulas turn to R, because of the amazing R package copula. While it is still well maintained and regularly updated, the R package copula is a mixture of obscure, heavily optimized C code and more standard R code, which makes it a complicated code base for readability, extensibility, reliability and maintenance.\n\nThis is an attempt to provide a very light, fast, reliable and maintainable copula implementation in native Julia (which means, in particular, floating point type agnostic, i.e. compatibility with BigFloat, DoubleFloats, MultiFloats and other kind of numbers). The two most important exported types are: \n\nCopula: an abstract mother type for all the copulas in the package. \nSklarDist:  allows construction of a multivariate distribution by specifying the copula and the marginals through Sklar's theorem. \n\nWhat is already implemented\n\nThe API contains random number generation, cdf and pdf evaluation, and the fit function from Distributions.jl. A typical use case might look like this: \n\nusing Copulas, Distributions, Random\nX₁ = Gamma(2,3)\nX₂ = Pareto()\nX₃ = LogNormal(0,1)\nC = ClaytonCopula(3,0.7) # A 3-variate Clayton Copula with θ = 0.7\nD = SklarDist(C,(X₁,X₂,X₃)) # The final distribution\n\n# This generates a (3,1000)-sized dataset from the multivariate distribution D\nsimu = rand(D,1000)\n\n# While the following estimates the parameters of the model from a dataset: \nD̂ = fit(SklarDist{FrankCopula,Tuple{Gamma,Normal,LogNormal}}, simu)\n# Increase the number of observations to get a beter fit (or not?)  \n\nAvailable copula families are:\n\nGaussianCopula,\nTCopula,\nArchimedeanCopula (for any generator),\nClaytonCopula,FrankCopula, AMHCopula, JoeCopula, GumbelCopula as example of the ArchimedeanCopula abstract type, see below,\nWCopula and MCopula, which are Fréchet-Hoeffding bounds,\nEmpiricalCopula to follow closely a given dataset.\n\nThe next ones to be implemented will probably be: \n\nNested archimedeans (general, with the possibility to nest any family with any family, assuming it is possible, with parameter checks.)\nBernstein copula and more general Beta copula as smoothing of the Empirical copula. \nCheckerboardCopula (and more generally PatchworkCopula)\n\nAdding a new ArchimedeanCopula is very easy. The Clayton implementation is as short as: \n\nstruct ClaytonCopula{d,T} <: Copulas.ArchimedeanCopula{d}\n    θ::T\nend\nClaytonCopula(d,θ)            = ClaytonCopula{d,typeof(θ)}(θ)     # Constructor\nϕ(C::ClaytonCopula, t)        = (1+sign(C.θ)*t)^(-1/C.θ)          # Generator\nϕ⁻¹(C::ClaytonCopula,t)       = sign(C.θ)*(t^(-C.θ)-1)            # Inverse Generator\nτ(C::ClaytonCopula)           = C.θ/(C.θ+2)                       # θ -> τ\nτ⁻¹(::Type{ClaytonCopula},τ)  = 2τ/(1-τ)                          # τ -> θ\nradial_dist(C::ClaytonCopula) = Distributions.Gamma(1/C.θ,1)      # Radial distribution\n\nThe Archimedean API is modular: \n\nTo sample an archimedean, only radial_dist and ϕ are needed.\nTo evaluate the cdf and (log-)density in any dimension, only ϕ and ϕ⁻¹ are needed.\nCurrently, to fit the copula τ⁻¹ is needed as we use the inverse tau moment method. But we plan on also implementing inverse rho and MLE (density needed). \nNote that the generator ϕ follows the convention ϕ(0)=1, while others (e.g., https://en.wikipedia.org/wiki/Copula(probabilitytheory)#Archimedean_copulas) use ϕ⁻¹ as the generator.\nWe plan on implementing the Williamson transformations so that radial-dist can be automaticlaly deduced from ϕ and vice versa, if you dont know much about your archimedean family\n\nDev Roadmap\n\nUrgent things\n\n[ ] Add tests and documentation\n\nNext\n\n[ ] Extensive documentation and tests for the current implementation. \n[x] Implement archimedean density generally. \n[ ] Docs: show how to implement another archimedean.  \n[ ] Give the user the choice of fitting method via fit(dist,data; method=\"MLE\") or fit(dist,data; method=\"itau\") or fit(dist,data; method=\"irho\").\n[ ] Fitting a generic archimedean : should provide an empirical generator\n[ ] Make Archimedean more generic : inputing only radial_dist or only phi shoudl be enough to get pdf, cdf, rand, tau, rho, itau, irho, fit, radial_dist, etc...  Williamson d-transform and inverse d-transform should be implemented. The checking of nesting possibility should be done automatically with some rules (is phi_inv \\circ phi complementely monotonous ? with obviously shortcut for inter-family nestings.)   \n\nMaybe later\n\n[ ] Vines?\n[ ] NestedArchimedean and very easy implementation of new archimeean copulas via the radial dist or the phi/invphi + Williamson transform. \n[ ] BernsteinCopula and BetaCopula could also be implemented. \n[ ] PatchworkCopula and CheckerboardCopula: could be nice things to have :)\n[ ] Goodness of fits tests ?\n\nContributions are welcome\n\nDo not hesitate to open an issue to discuss :)\n\n\n\n\n\n","category":"module"},{"location":"#Copulas.EmpiricalCopula","page":"Home","title":"Copulas.EmpiricalCopula","text":"EmpiricalCopula{d,MT}\n\nFields:\n\nu::MT - the matrix of observations. \n\nConstructor\n\nEmpiricalCopula(u;pseudos=true)\n\nThe EmpiricalCopula in dimension d is parameterized by a pseudo-data matrix wich should have shape (d,N). Its expression is given as :  \n\nC(mathbf x) = frac1Nsum_i=1^n mathbf 1_mathbf u_i le mathbf x\n\nThis function is very practical, be be aware that this is not a true copula (since mathbf u are only pseudo-observations). The constructor allows you to pass dirctly pseudo-observations (the default) or will compute them for you. You can then compute the cdf of the copula, and sample it through the standard interface.\n\n\n\n\n\n","category":"type"},{"location":"#Copulas.PlackettCopula","page":"Home","title":"Copulas.PlackettCopula","text":"PlackettCopula{P}\n\nFields:     - θ::Real - parameter\n\nConstructor\n\nPlackettCopula(θ)\n\nParameterized by theta  0 theta neq 1 The Plackett copula is\n\nC_theta(uv) = fracleft 1+(theta-1)(u+v)right- sqrt1+(theta-1)(u+v)^2-4uvtheta(theta-1)2(theta-1)\n\nand for theta = 1     math \\C_{1}(u,v) = uv\n\nMore details about Plackett copulation are found in Joe, H. (2014). Dependence modeling with copulas. CRC press, Page.164\n\n\n\n\n\n","category":"type"},{"location":"#Base.rand-Union{Tuple{T}, Tuple{Random.AbstractRNG, Copulas.AlphaStable{T}}} where T<:AbstractFloat","page":"Home","title":"Base.rand","text":"Generate independent stable random numbers.\n\n:param α: characteristic exponent (0.1 to 2.0) :param β: skew (-1 to +1) :param scale: scale parameter :param loc: location parameter (mean for α > 1, median/mode when β=0)\n\nThis implementation is based on the method in J.M. Chambers, C.L. Mallows and B.W. Stuck, \"A Method for Simulating Stable Random Variables,\" JASA 71 (1976): 340-4. McCulloch's MATLAB implementation (1996) served as a reference in developing this code.\n\n\n\n\n\n","category":"method"}]
}
